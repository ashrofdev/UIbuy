{"version":3,"sources":["Components/Nav/Nav.js","Components/Search/Search.js","Components/Products/Item.js","Components/Products/Products.js","Components/Error/Error.js","Components/Likes/Likes.js","Server.js","Components/Sell/Sell.js","App.js","serviceWorker.js","index.js"],"names":["Nav","onRouteChange","className","onClick","Search","onChange","this","props","filterProducts","placeholder","Component","Item","name","seller","price","img","onLike","item","alt","src","e","Products","items","console","log","map","i","itemNo","product_url","product_name","seller_name","product_price","Error","message","style","color","opacity","textAlign","paddingTop","fontWeight","fontSize","Likes","likes","likesList","error","length","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseDB","database","storage","Sell","state","file","onSubmitProduct","a","ref","child","document","querySelector","value","put","getDownloadURL","then","url","push","set","price_negotiability","item_details","snapshot","onUpload","setState","target","files","type","App","route","products","inputValue","route2","classList","remove","add","isLiked","forEach","splice","once","val","filteredProducts","filter","toLowerCase","includes","toLocaleLowerCase","filteredLikes","gridColumn","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df020c31.chunk.js","sourcesContent":["import React from 'react';\nimport './nav.css'\n\nconst Nav = ({onRouteChange}) => {\n    return (\n        <nav>\n            <ul>\n                <li ><button className=\"products\" onClick={()=>onRouteChange('products')}>Home</button></li>\n                <li ><button className=\"likes\" onClick={()=>onRouteChange('likes')}>Likes</button></li>\n                <li ><button className=\"sell\" onClick={()=>onRouteChange('sell')}>Sell an item</button></li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Nav;","import React, { Component } from 'react';\nimport './search.css'\n\nclass Search extends Component {\n    render() {\n        return (\n            <div className=\"search\">\n                <input onChange={this.props.filterProducts} placeholder=\"üîç Search for an item\" className=\"search-box\"/>\n            </div>\n        );\n    }\n}\n\nexport default Search;","import React from 'react';\nimport './item.css'\n\nconst Item = ({name, seller, price, img, onLike, item}) => {\n    return (\n        <div className=\"item\">\n            <figure>\n                <img alt=\"product img\" src={img}/>\n            </figure>\n            <div className=\"item_details\" >\n                <h3 className=\"item_name\">{name}</h3>\n                <div className=\"item_sub_details\">\n                    <p className=\"item_seller\">{seller}</p>\n                    <p className=\"item_price\">{price}</p>\n                </div>\n                <div className=\"cta\">\n                    <button onClick={(e)=>onLike(item, e)} className=\"like_btn\">‚ù§Ô∏è</button>\n                    <button className=\"buy_btn\">BUY NOW</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Item;","import React, { Component } from 'react';\nimport './prodcs.css'\nimport Item from './Item';\n\nclass Products extends Component {\n    render() {\n        const { items, onLike } = this.props\n        console.log(items)\n        const item = items.map((i,e)=>{\n            return <Item item={items[e]} itemNo={e} onLike={onLike} img={items[e].product_url} name={items[e].product_name} seller={items[e].seller_name}\n             price={items[e].product_price}/>\n        })\n        return (\n            <div className=\"prodcs\">\n                {item}\n            </div>\n        );\n    }\n}\n\nexport default Products;","import React from 'react';\n\nconst Error = ({message}) => {\n    return (\n        <div className=\"error\" >\n            <h2 style={{\n                color: \"gray\",\n                opacity: .5,\n                textAlign: \"center\",\n                paddingTop: \"5rem\",\n                fontWeight: 200,\n                fontSize: \"2rem\"\n                }}>\n                {message}\n                </h2>\n        </div>\n    );\n};\n\nexport default Error;","import React, { Component } from 'react';\nimport './likes.css'\nimport Item from '../Products/Item';\nimport Error from '../Error/Error'\n\nclass Likes extends Component {\n    render() {\n        const { likes, error } = this.props\n        const likesList = likes.map((i,e)=>{\n            return <Item img={likes[e].img} name={likes[e].name} seller={likes[e].seller}\n             price={likes[e].price}/>\n        })\n        return (\n            <div className=\"likes-page prodcs\">\n                {\n                    likes.length < 1 ?\n                        <Error message={\"ü§∑üèΩ‚Äç‚ôÇÔ∏è Your likes list is currently empty\"}/>\n                    : likesList\n                }\n            </div>\n        );\n    }\n}\n\nexport default Likes;","import firebase from 'firebase/app'\nimport 'firebase/app'\nimport 'firebase/database'\nimport 'firebase/storage'\n\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC9vhjcrGujljlfDLhSKsEkBnYJqaCsLqA\",\n    authDomain: \"test-mflbrq.firebaseapp.com\",\n    databaseURL: \"https://test-mflbrq.firebaseio.com\",\n    projectId: \"test-mflbrq\",\n    storageBucket: \"test-mflbrq.appspot.com\",\n    messagingSenderId: \"944291062313\",\n    appId: \"1:944291062313:web:7af4c2f4bba92e2841b238\",\n    measurementId: \"G-PV8YZS2737\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export const firebaseDB = firebase.database()\n \n \n\n  export const storage = firebase.storage()\n","import './sell.css'\nimport {firebaseDB, storage} from '../../Server'\n\n\nimport React, { Component } from 'react';\n\nclass Sell extends Component {\n\n    state = {\n        file: ''\n    }\n\n    onSubmitProduct = async () => {\n        \n        await storage.ref('product_images')\n        .child(document.querySelector('.product_name').value)\n        .put(this.state.file)\n\n        storage.ref('product_images').child(document.querySelector('.product_name').value)\n        .getDownloadURL().then((url)=>{\n            console.log(url)\n            firebaseDB.ref('products').push().set({\n                product_url: url,\n                seller_name: document.querySelector('.seller_name').value,\n                product_name: document.querySelector('.product_name').value,\n                product_price: '‚Ç¶' + document.querySelector('.product_price').value,\n                price_negotiability: document.querySelector('select').value,\n                item_details: document.querySelector('.item_details').value\n            }).then((snapshot)=>{\n                console.log(snapshot)\n            })\n        })\n        \n    }\n\n    onUpload = (e) => {\n        this.setState({file: e.target.files[0]})\n    }\n\n    render() {\n    \n        return (\n            <div className=\"sell-page\">\n                <label>\n                    UPLOAD IMAGE\n                    <input onChange={this.onUpload} type=\"file\" className=\"product_img\" />\n                </label>\n                <input placeholder=\"Enter your name\" className=\"seller_name\"/>\n                <input placeholder=\"Enter product's name\" className=\"product_name\"/>\n                <input placeholder=\"Enter product's price\" className=\"product_price\"/>\n                <label>\n                    Price Negotiability\n                    <select>\n                        <option>Negotiable</option>\n                        <option>Not negotiable</option>\n                    </select>\n                </label>\n                <textarea className=\"item_details\" placeholder=\"Item details\"/>\n                <button onClick={this.onSubmitProduct}>SELL ITEM</button>\n            </div>\n        );\n    }\n}\n\n\nexport default Sell;","import React, { Component } from 'react';\nimport './App.css'\nimport Nav from './Components/Nav/Nav'\nimport Search from './Components/Search/Search'\nimport Products from './Components/Products/Products'\nimport Likes from './Components/Likes/Likes'\nimport Sell from './Components/Sell/Sell'\nimport { firebaseDB } from './Server';\n\nclass App extends Component {\n  state = {\n    route: 'products',\n    products: [],\n    likes: [],\n    inputValue: '',\n  }\n  componentDidMount(){\n\n    const items = []\n    firebaseDB.ref('products').once('value').then(snapshot=>{\n      snapshot.forEach(e => {\n        items.push(e.val())\n      });\n      this.setState({products: items})\n        console.log(this.state.products)\n    })\n    // firebaseDB.ref('products').once('value').then((snapshot)=>{\n    //   console.log(snapshot.val())\n    //   snapshot.val().forEach(function(item){\n    //     items.push(item)\n    //   })\n    //   // Object.entries(snapshot.val()).map(e => {\n    //   //   items.push(e[1])\n    //   // })\n    //   this.setState({products: items})\n    // })\n  }\n\n  onRouteChange = (route) => {\n    this.setState({error: false})\n    let route2 = this.state.route\n    document.querySelector('.'+route2).classList.remove('route')\n    document.querySelector('.'+route).classList.add('route')\n    this.setState({route: route})\n  }\n\n  filterProducts = (e) => {\n    console.log(e.target.value)\n    this.setState({inputValue: e.target.value})\n  }\n\n  onLike = (item, e) => {\n    console.log(e.target)\n    if (item.isLiked) {\n      e.target.classList.remove('onlike')\n      item.isLiked = false\n      this.state.likes.forEach((e,i)=>{\n        console.log(i,11,e,11111)\n        if (item === e) {\n          console.log(e, '.........')\n          this.state.likes.splice(i, 1)\n        }\n      })\n    } else {\n      e.target.classList.add('onlike')\n      item.isLiked = true\n      this.state.likes.push(item)\n    }\n  }\n\n \n\n  render() {\n    const filteredProducts = this.state.products.filter((item)=> \n    item.product_name.toLowerCase().includes(this.state.inputValue.toLocaleLowerCase()))\n\n    const filteredLikes = this.state.likes.filter((item)=> \n    item.product_name.toLowerCase().includes(this.state.inputValue.toLocaleLowerCase()))\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div style={{gridColumn: \"2/8\"}}>\n            <h1 className=\"heading\"> {\"NO IDEAüôÉ\"} </h1>\n            <p>Nothing more than 25 words to describe the websiteü§ß</p>\n            <section className=\"navsearch\">\n                <Nav onRouteChange={this.onRouteChange}/>\n                <Search filterProducts={this.filterProducts}/>\n            </section>\n          </div>\n        </header>\n        <main>\n          <section>\n            {\n              this.state.route === 'products'?\n                <Products items ={filteredProducts} onLike={this.onLike}\n                 error={this.state.error}/>\n              : this.state.route === 'sell'?\n                <Sell/>\n              : this.state.route === 'likes'?\n                <Likes likes={filteredLikes} />\n              : null\n            }\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}